import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards as kb
import requests

# –§–∞–π–ª config —Å –∫–ª—é—á–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
from config import TOKEN, API_KEY_SPORT

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–æ–≤ Bot (–æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram bot API) –∏ Dispatcher (—É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥)
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å Form, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç StatesGroup. –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≥–æ–¥
class Form(StatesGroup):
    year = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –ª—é–±–∏–º–æ–π –∫–æ–º–∞–Ω–¥—ã –ù–ë–ê —Å 2021 –ø–æ 2023 –≥–æ–¥\n"
        "–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–æ–¥:")
    await state.set_state(Form.year)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –∏ —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
@dp.message(Form.year)
async def name(message: Message, state: FSMContext):
    await state.update_data(year=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é:", reply_markup=await kb.conf_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ East –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–æ—Å—Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
@dp.callback_query(F.data == 'east')
async def east_conf(callback: CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:', reply_markup=await kb.east_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ West  –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–∞–¥–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
@dp.callback_query(F.data == 'west')
async def west_conf(callback: CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:', reply_markup=await kb.west_keyboard())

# –õ–æ–≤–∏–º –∫–æ–ª–±—ç–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "team_"
@dp.callback_query(F.data.startswith("team_"))
async def team(callback: CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º –≥–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    year = user_data['year']
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–∞–Ω–¥—ã –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏ –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
    team_id = callback.data.split("_")[1]
    # –§–æ—Ä–º–∏—Ä—É–µ–º url –∏ headers
    url = f"https://v2.nba.api-sports.io/players?team={team_id}&season={year}"  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º team_id –∏ year
    headers = {
        'x-rapidapi-key': API_KEY_SPORT,
        'x-rapidapi-host': 'v2.nba.api-sports.io'
    }
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    response = requests.get(url, headers=headers)
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–¥–∞—á–Ω—ã–π
    if response.status_code == 200:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ json
        data = response.json()
        # –î–æ—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        players = data.get('response', [])
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–∞–º–∏
        message_text = f"–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –≤ {year} –≥–æ–¥—É:\n"
        for player in players:
            message_text += f"- {player['firstname']} {player['lastname']}\n"
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        await callback.message.answer(message_text)
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API üòï")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback.answer()

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞—à –±–æ—Ç
async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
if __name__ == '__main__':
    asyncio.run(main())